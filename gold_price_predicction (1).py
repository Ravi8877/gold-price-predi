# -*- coding: utf-8 -*-
"""gold price predicction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l4cMx_BWZ8f9mbNtdm231ljhahFj5SZD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""Data collection and processing

"""

1#loading the csv data to a pandas Dataframe 
gold_data=pd.read_csv('/content/gld_price_data.csv')

# print first 5 rows in the dataframe
gold_data.head()

# print last 5 rows in dataframe
gold_data.tail()

# number of rows and and columns
gold_data.shape

# getting some basic information about the data
gold_data.info()

# checking the numbe of missing values
gold_data.isnull().sum()

# 1 getting the statical measures of the data
gold_data.describe()



"""correlation
1.positive
2.neagative
"""

correlation=gold_data.corr()

# 1constructing a heatmap to understand the correlation
plt.figure(figsize =(8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

# 1correlation values of gold
print(correlation['GLD'])

# 1 checking the distribution of gold price
sns.distplot(gold_data['GLD'],color='green')

1#

"""splitting the features and target

"""

X =gold_data.drop(['Date','GLD'],axis=1)
Y =gold_data['GLD']

print(X)

print(Y)

"""Splitting into training data and test data"""

X_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.2, random_state=2)

"""Model trainig:
Random Forest Resgessor
"""

regressor = RandomForestRegressor(n_estimators=100)

1# training the model
regressor.fit(X_train,Y_train)

"""Model evaluation"""

1#prediction on Test data
test_data_prediction =regressor.predict(X_test)

print(test_data_prediction)

# R squared error
error_score=metrics.r2_score(Y_test, test_data_prediction)
print("R squared error:", error_score)

"""Compare the Actual values and predicted values in a plot"""

Y_test =list(Y_test)

plt.plot(Y_test, color='blue', label='Actual value')
plt.plot(test_data_prediction, color='green', label='predicted value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price ')
plt.legend()
plt.show()